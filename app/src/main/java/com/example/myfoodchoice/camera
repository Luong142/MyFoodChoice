
public class MainActivity extends AppCompatActivity
{
    private int REQUEST_CAMERA = 0, SELECT_FILE = 1;
    private  String currentPhotoPath;
    private String imageFileName;
    private File imgFile;
    private Button btnSelectImage;
    private Button btnCaptureImage;
    private ImageView frame;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        frame = (ImageView) findViewById(R.id.frameImage);
        btnSelectImage = (Button) findViewById(R.id.btnSelectImage);
        btnCaptureImage = (Button) findViewById(R.id.btnCaptureImage);

        btnSelectImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                galleryIntent(); //call this when user click the button
            }
        });

        btnCaptureImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                cameraIntent(); //call this when user click the button
            }
        });
    }
    private File createImageFile() throws IOException {
        // Create an image file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        imageFileName = "JPEG_" + timeStamp + "_";
        File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        File image = File.createTempFile(
                imageFileName,  /* prefix */
                ".jpg",         /* suffix */
                storageDir      /* directory */
        );
        // Save a file: path for use with intents
        currentPhotoPath = image.getAbsolutePath();
        return image;
    }

    private void galleryIntent()
    {
        Intent intent = new Intent();
        intent.setType("image/*");
        intent.setAction(Intent.ACTION_GET_CONTENT);
        startActivityForResult(Intent.createChooser(intent,"Select File"),SELECT_FILE);
    }

    private void cameraIntent()
    {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        File photoFile = null;
        try {
            photoFile = createImageFile();
        } catch (IOException ex) {
            // Error occurred while creating the File
            Toast.makeText(this,"Photo file can't be created, please try again", Toast.LENGTH_SHORT).show();
            return;
        }
        // Continue only if the File was successfully created
        if (photoFile != null) {
            Uri photoURI = FileProvider.getUriForFile(this,"com.example.appcamera", photoFile);
            intent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
            startActivityForResult(intent, REQUEST_CAMERA);
        }
    }

    //Checking current Activity Result
    @Override
    public void onActivityResult (int requestCode, int resultCode, Intent data)
    {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == Activity.RESULT_OK) {
            if (requestCode == SELECT_FILE)
                onSelectFromGalleryResult(data);
            else if (requestCode == REQUEST_CAMERA)
                onCaptureImageResult(data);
        }
    }

    //If select from Gallery
    private void onSelectFromGalleryResult(Intent data) {
        Uri photoUri = null;
        if (data != null) {
            photoUri = data.getData();
        }
        frame.setImageURI(photoUri);
    }

    //If use Camera
    private void onCaptureImageResult(Intent data) {
        imgFile = new  File(currentPhotoPath);
        if(imgFile.exists()) {
            frame.setImageURI(Uri.fromFile(imgFile));
            //frame.setImageURI(Uri.parse(currentPhotoPath));
            addPhototoGallery();
        }
    }

    @RequiresApi(api = Build.VERSION_CODES.Q)
    private void addPhototoGallery()
    {
        ContentResolver resolver = getApplicationContext().getContentResolver();

        //Find all images on the external storage device â€“
        // scoped storage introduced in Android 10 / API level 29+
        //Get the content: style URI for the image media table on the given volume

        Uri photoCollection = MediaStore.Images.Media.getContentUri(MediaStore.VOLUME_EXTERNAL);

        // Publish a new image
        ContentValues imageDetails = new ContentValues();
        imageDetails.put(MediaStore.Audio.Media.DISPLAY_NAME, imageFileName);
        imageDetails.put(MediaStore.Audio.Media.MIME_TYPE, "image/jpeg");
        imageDetails.put(MediaStore.Audio.Media.IS_PENDING, 1);

        Uri photoUri = resolver.insert(photoCollection, imageDetails);
        try {
            OutputStream imageOut = resolver.openOutputStream(photoUri);
            Bitmap bitmap = null;
            bitmap = ImageDecoder.decodeBitmap(ImageDecoder.createSource(imgFile)); //requires API28+
            bitmap.compress(Bitmap.CompressFormat.JPEG, 50, imageOut);
        }
        catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        imageDetails.clear();
        imageDetails.put(MediaStore.Audio.Media.IS_PENDING, 0); //requires API29+
        resolver.update(photoUri, imageDetails, null, null);
    }
}